1.속성 선택자
a[href]
a[href="ww.~~"]
a[href^="www."]
a[href$="kr"]
a[href~="naver"]
a[href*="nav"}

 /*속성 선택자 태그[속성이름]*/
      div [class] {
        color: green;
      }
      /*태그[속성이름=변수]
      */
      a[href="http://www.paullab.co.kr"]
      {
        font-size: 32px;
      }
      /*태그[속성이름~=변수]속성이름의 속성값 중에 변수를 하나의 완전한 단어로 포함하는 태그를 선택함*/
      a[class~="weniv"] {
        color: black;
      }
      /*태그[속성이름^=변수]속성의 속성값이 변수로 시작하는 태그*/
      /*태그[속성$=변수]*/
      /**:전체
      ^:시작,반대
      $:끝*/
      /*태그[속성*=변수]속성의 속성값이 변수를 포함하는 태글를 선택한다. 포함만하면 선택이 된다.
      태그[속성~=변수]와 태그[속성*=변수]의차이*/
태그[속성]="변수"]
속성의 속성값이 변수이거나 변수로 시작하면서 뒤에 바로 -하이픈 기호가 있는 태그를 선택한다. :)a[href="https"] <a href="https"></a>또는 <a href="https-" ></a>를 선택한다.

2. 가상 클래스 선택자
가상 클래스 선택자 
클래스가 없는데 있는 것처럼 처리한다. 콜론하나
가상요소선택자 요소가 없는데 있는 것 처럼 처리한다. 콜론두개

a:nth-child(n)
a:first-child
a:last-child
a:not(.one)

상호 작용을 위한 가상클래스
:hover

<style>
      /*first,last는 여백 조절시 자주 사용된다.
      첫번째 자식에 적용된다는 것을 유의하자
      nth-child()의 숫자가 0부터 시작하지 않는다.*/
      .foo:first-child {
        background-color: red;
      }
      .foo:last-child {
        background-color: pink;
      }
      .foo:nth-child(2) {
        background-color: green;
      }
      .foo:nth-child(odd) {
        font-size: 30px;
      }
      .foo:nth-child(even) {
        font-size: 10px;
      }
      /*n번째 자식들 n은0부터 사용한다.*/
      .foo:nth-child(n) {
        color: beige;
      }
      .foo:nth-child(2n + 1) {
        color: black;
      }
      /*방문한 적이 있는 링크를 선택한다. 개인정보에 유의*/
      a:visited {
        color: green;
      }
      li:not(.one) {
        color: Red;
        /*one이 아닌 것만 빨간색 브라우저 사용여부를 판단하고 써야한다.*/
      }
      /*상호작용을 위한 가상 클래스*/
      button {
        border: 1px solid #ddd;
        padding: 30px;
        background-color: lightblue;
        color: pink;
        border-radius: 4px;
        font-size: 20px;
        font-weight: 700;
        transition: all 0.5s;
      }
      button:hover {
        border: 1px solid #ddd;
        padding: 30px;
        background-color: pink;
        color: lightblue;
        border-radius: 4px;
        font: size 20px;
        font-weight: 700;
        letter-spacing: 3px;
      }
      /*요소실행시 링크나 버튼을 누르면 변한다.*/
      button:active {
        color: blueviolet;
      }
      /*focus는 요소에 포커스가 있을때 클릭할 수 있는 요소나 input,select같이 상호작용하는 경우   */
      input:focus {
        border: 5px solid pink;
        outline: 0;
      }
      .b:checked + label {
        background-color: pink;
      }
    </style>
 <body>
    <h1 style="color: blue">가상 클래서 선택자</h1>
    <ul>
      <!--<div>hello</div>-->
      <li class="foo">1</li>
      <li class="foo">2</li>
      <li class="foo">3</li>
      <li class="foo">4</li>
      <li class="foo">5</li>
    </ul>
    <ul>
      <li>hello world</li>
      <li>hello world</li>
      <li class="one">hello world</li>
      <li>hello world</li>
      <li>hello world</li>
    </ul>
    <button>hover</button>
    <form action=" " methid="get">
      <label for="a">이름</label>
      <input type="text" id="a" />
      <label for="b">나이</label>
      <input type="text" id="b" /><br />
      <input class="b" type="checkbox" id="check" />
      <label for="check">안녕 안녕 안녕 안녕</label>
    </form>
  </body>


2. 가장 요소 선택자 콜론이 두개-가상요소선택자 요소가 없는데 있는 것 처럼 처리한다. 콜론두개
::before과::after을 이용해서 컨텐츠를 추가하면 전체선택에서 포함되지않는다
css로 생성한 콘텐츠는 dom이 포함되지 않는다.
content: 또는 display:block
가상 요소 선택자는 마크업 없는 요소를 삽입(가상 클래스 선택자는 클래스 없는 요소에 클래스 삽입)
브라우저, OS 스크린리더에 따라 가상요소 선택자를 읽을 수도 있고 읽지 않을 수도 있습니다.
::before

::after

상호작용을 위한 가상클래스

combinator- 선택자와 선택자를 결합해서 사용하는 선택자
선택자와 선택자를 결합해서 사용하는 선택자를 ‘콤비네이터’라고 합니다. 콤비네이터에도 여러 가지 종류가 있어 이에 대해서 알아보겠습니다.

자손 콤비네이터
하위 선택자는 선택자 사이를 공백으로 사용한다.
section ul{ color:pink} 이면 section아래의 모든 ul태그를 가리킨다.

자식 콤비네이터
하위 선택자는 선택자 사이를 >를 사용하여 나타낸다.
앞요소의 자식인 요소를 선택한다. 바로 아래의 하위요소에만 적용한다.
.foo > p 클래서foo에서 직계자식 엘리먼트 중 p를 선택

인접 형제 콤비네이터
+를 사용한다.
전방 선택자 직후에 나오는 후방형제선택자선택

일반형제 ~ ~기준 앞에 나오는 선택자 뒤에 나오는 모든 요소


box
외부 디스플레이 타입 (block inline inline-block )부모와 형제간의 박스 배치
내부 디스플레이 타입 (flex , grid): 내부 자식 박스 배치


4. flex
flex:1차원 배열
grid:2차원 배열
1분코딩